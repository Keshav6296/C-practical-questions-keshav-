#include <iostream>

using namespace std;

// Function to show the address of each character in the string
void showAddress(char* str) {
    cout << "Character Address Table:\n";
    while (*str != '\0') {
        cout << "'" << *str << "' : " << (void*)str << endl;
        str++;
    }
}

// Function to concatenate two strings without using strcat()
void concatenate(char* str1, char* str2, char* result) {
    char* ptr = result;

    // Copy first string
    while (*str1 != '\0') {
        *ptr = *str1;
        ptr++;
        str1++;
    }

    // Copy second string
    while (*str2 != '\0') {
        *ptr = *str2;
        ptr++;
        str2++;
    }

    *ptr = '\0'; // Null-terminate result
}

// Function to compare two strings without using strcmp()
int compareStrings(char* str1, char* str2) {
    while (*str1 != '\0' && *str2 != '\0') {
        if (*str1 != *str2)
            return (*str1 > *str2) ? 1 : -1;
        str1++;
        str2++;
    }

    return (*str1 == '\0' && *str2 == '\0') ? 0 : ((*str1 == '\0') ? -1 : 1);
}

// Function to calculate length of string using pointers
int stringLength(char* str) {
    int length = 0;
    while (*str != '\0') {
        length++;
        str++;
    }
    return length;
}

// Function to convert lowercase letters to uppercase
void toUppercase(char* str) {
    while (*str != '\0') {
        if (*str >= 'a' && *str <= 'z')
            *str = *str - 32;
        str++;
    }
}

// Function to reverse a string
void reverseString(char* str) {
    int len = stringLength(str);
    char* start = str;
    char* end = str + len - 1;

    while (start < end) {
        char temp = *start;
        *start = *end;
        *end = temp;

        start++;
        end--;
    }
}

// Function to insert one string into another at a given position
void insertString(char* str1, char* str2, int pos, char* result) {
    char* ptr = result;
    int i = 0;

    // Copy first string up to position
    while (i < pos && *str1 != '\0') {
        *ptr = *str1;
        ptr++;
        str1++;
        i++;
    }

    // Copy second string
    while (*str2 != '\0') {
        *ptr = *str2;
        ptr++;
        str2++;
    }

    // Copy remaining part of first string
    while (*str1 != '\0') {
        *ptr = *str1;
        ptr++;
        str1++;
    }

    *ptr = '\0'; // Null terminate result
}

int main() {
    int choice;
    char str1[100], str2[100], result[200];
    int position;

    do {
        cout << "\nMenu for String Manipulation:\n";
        cout << "1. Show address of each character in string\n";
        cout << "2. Concatenate two strings\n";
        cout << "3. Compare two strings\n";
        cout << "4. Calculate length of the string\n";
        cout << "5. Convert all lowercase characters to uppercase\n";
        cout << "6. Reverse the string\n";
        cout << "7. Insert a string in another string at a user-specified position\n";
        cout << "8. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore(); // Clear input buffer

        switch (choice) {
            case 1:
                cout << "Enter a string: ";
                cin.getline(str1, 100);
                showAddress(str1);
                break;

            case 2:
                cout << "Enter first string: ";
                cin.getline(str1, 100);
                cout << "Enter second string: ";
                cin.getline(str2, 100);
                concatenate(str1, str2, result);
                cout << "Concatenated String: " << result << endl;
                break;

            case 3:
                cout << "Enter first string: ";
                cin.getline(str1, 100);
                cout << "Enter second string: ";
                cin.getline(str2, 100);
                int cmp;
                cmp = compareStrings(str1, str2);
                if (cmp == 0)
                    cout << "Strings are equal.\n";
                else if (cmp > 0)
                    cout << "First string is greater.\n";
                else
                    cout << "Second string is greater.\n";
                break;

            case 4:
                cout << "Enter a string: ";
                cin.getline(str1, 100);
                cout << "Length of string: " << stringLength(str1) << endl;
                break;

            case 5:
                cout << "Enter a string: ";
                cin.getline(str1, 100);
                toUppercase(str1);
                cout << "Uppercase String: " << str1 << endl;
                break;

            case 6:
                cout << "Enter a string: ";
                cin.getline(str1, 100);
                reverseString(str1);
                cout << "Reversed String: " << str1 << endl;
                break;

            case 7:
                cout << "Enter first string: ";
                cin.getline(str1, 100);
                cout << "Enter second string to insert: ";
                cin.getline(str2, 100);
                cout << "Enter position to insert at: ";
                cin >> position;
                cin.ignore(); // Clear input buffer
                if (position < 0 || position > stringLength(str1)) {
                    cout << "Invalid position!\n";
                } else {
                    insertString(str1, str2, position, result);
                    cout << "String after insertion: " << result << endl;
                }
                break;

            case 8:
                cout << "Exiting program...\n";
                break;

            default:
                cout << "Invalid choice! Please try again.\n";
        }

    } while (choice != 8);

    return 0;
}
